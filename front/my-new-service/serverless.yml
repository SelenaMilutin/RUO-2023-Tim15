
service: my-new-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  environment:
    TABLE_NAME:
      Ref: users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - sns:Publish
      Resource:
        - "Fn::GetAtt": [users, Arn]
        - arn:aws:sns:eu-central-1:260436118818:DatabaseTopic
        - "Fn::GetAtt": [galleryTable, Arn]
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::milostim15.gallery
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - arn:aws:s3:::milostim15.gallery/*
    - Effect: Allow
      Action:
        - states:StartExecution
        - states:StopExecution
        - states:DescribeExecution
        - states:ListExecutions
        - states:ListStateMachines
        - states:DescribeStateMachine
        - states:GetExecutionHistory
      Resource:
        - "arn:aws:states:*:*:stateMachine:*"
        - "arn:aws:states:*:*:execution:*"

package:
 individually: True
 patterns:
   - '!**/**'
   - 'utility/**'

functions:
  testlambda:
    handler: user/test.test
    package:
      include: 'user/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - POST

  authorizerFunction:
    handler: user/authorizer.handler
    package:
      include: 'user/**'

  login:
    handler: user/login.handler
    package:
      include: 'user/**'
    events:
      - http:
          path: login
          method: post
          cors: true

  download:
    handler: user/download.handler
    package:
      include: 'user/**'
    events:
      - http:
          path: download
          method: post
          cors: true

  myFunction:
    handler: user/myFunction.handler
    package:
      include: 'user/**'
    events:
      - http:
          path: my-endpoint
          method: post
          cors: true
          authorizer:
            name: authorizerFunction
            identitySource: method.request.header.Authorization
            type: token

  registerUser:
      handler: user/register.registerUser
      package:
        include: 'user/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST

  uploadS3:
      handler: upload/uploadS3.upload
      package:
        include: 'upload/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST

  uploadDDB:
      handler: upload/uploadDDB.upload
      package:
        include: 'upload/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      
      # events:
      # - sns:
      #     arn: !Ref SuperTopic
      #     topicName: DatabaseTopic

resources:
  Resources:
    Unauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: "DEFAULT_4XX"
        RestApiId:
          Ref: "ApiGatewayRestApi"

    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessUsers
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SuperTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: DatabaseTopic

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: petefi.katarinaspremic@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SuperTopic"}

    galleryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessGallery
        AttributeDefinitions:
          - AttributeName: s3Name
            AttributeType: S
        KeySchema:
          - AttributeName: s3Name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    galleryBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: milostim15.gallery

stepFunctions:
  stateMachines:
    uploadStepFunction:
      name: 'uploadStepFunction'
      events:
      - http:
          path: /upload
          method: POST
          request:
            schema:
              $ref: ./models/uploadRequest.json
          cors: true
      definition:
        StartAt: UploadS3
        States:
          # State key
          UploadS3:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-uploadS3"
            ResultPath: $.uploadS3Result
            Next: UploadDDB
          UploadDDB:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-uploadDDB"
            InputPath: $.uploadS3Result
            # Is end state
            End: true

plugins:
  - serverless-step-functions


service: my-new-service
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  environment:
    TABLE_NAME:
      Ref: users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - sns:Publish
        - ses:SendEmail
        - ses:SendRawEmail
      Resource:
        - "Fn::GetAtt": [users, Arn]
        - arn:aws:sns:eu-central-1:260436118818:DatabaseTopic
        - arn:aws:ses:*
        - "Fn::GetAtt": [galleryTable, Arn]
        - "Fn::GetAtt": [albumsTable, Arn]
        - "Fn::GetAtt": [usersByInvitation, Arn]
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::milostim15.gallery
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::milostim15.gallery/*
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - "*"

plugins:
  - serverless-step-functions

package:
 individually: True
 patterns:
   - '!**/**'
   - 'utility/**'

functions:

  registerUser:
      handler: user/register.registerUser
      package:
        include: 'user/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
        # REST API endpoint of API Gateway
        - http:
            # Path for this endpoint
            path: user
            # HTTP method for this endpoint
            method: post
            # Enable CORS. Don't forget to return the right header in your response
            cors: true

     
      
      # events:
      # - sns:
      #     arn: !Ref SuperTopic
      #     topicName: DatabaseTopic
  sendInvitation:
    handler: familyInvitation/sendInvitation.sendInvitation
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT
    events:
        # REST API endpoint of API Gateway
        - http:
            # Path for this endpoint
            path: famillyInvitation
            # HTTP method for this endpoint
            method: put
            # Enable CORS. Don't forget to return the right header in your response
            cors: true

  userFillsData:
    handler: familyInvitation/userFillsData.userFillsData
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - POST
    events:
        # REST API endpoint of API Gateway
        - http:
            # Path for this endpoint
            path: famillyInvitation
            # HTTP method for this endpoint
            method: post
            # Enable CORS. Don't forget to return the right header in your response
            cors: true
  
  createUser:
    handler: familyInvitation/createUser.createUser
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT
    events:
        # REST API endpoint of API Gateway
        - http:
            # Path for this endpoint
            path: user
            # HTTP method for this endpoint
            method: put
            # Enable CORS. Don't forget to return the right header in your response
            cors: true
  
  deleteUser:
    handler: familyInvitation/deleteUser.delete
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT
  login:
    handler: user/login.handler
    package:
      include: 'user/**'
    events:
      - http:
          path: login
          method: post
          cors: true

  uploadS3:
      handler: upload/uploadS3.upload
      package:
        include: 'upload/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST

  uploadDDB:
      handler: upload/uploadDDB.upload
      package:
        include: 'upload/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
  deleteS3:
      handler: delete/deleteS3.delete
      package:
        include: 'delete/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST

  deleteDDB:
      handler: delete/deleteDDB.delete
      package:
        include: 'delete/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST

  getFromAlbum:
      handler: view/getFromAlbum.get
      package:
        include: 'view/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
      - http:
          path: view
          method: post
          cors: true

  getSubAlbums:
      handler: view/getSubAlbums.get
      package:
        include: 'view/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
      - http:
          path: album
          method: post
          cors: true

  createAlbum:
      handler: view/createAlbum.post
      package:
        include: 'view/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
      - http:
          path: album/create
          method: post
          cors: true

  getOtherAlbums:
      handler: view/getOtherAlbums.get
      package:
        include: 'view/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
      - http:
          path: album/getOtherAlbums
          method: post
          cors: true
  editDDB:
      handler: upload/editDDB.edit
      package:
        include: 'upload/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
      - http:
          path: edit
          method: post
          cors: true

  getAlbumsOrFiles:
      handler: delete/getAlbumsOrFiles.getAlbumsOrFiles
      package:
        include: 'delete/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      events:
      - http:
          path: getAlbumsOrFiles
          method: post
          cors: true

resources:
  Resources:

    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessUsers
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    usersByInvitation:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessUsersByInvitation
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SuperTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: DatabaseTopic

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: petefi.katarinaspremic@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SuperTopic"}

    SNSSubscription2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: selena.milutin@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SuperTopic"}

    galleryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessGallery
        AttributeDefinitions:
          - AttributeName: s3Name
            AttributeType: S
        KeySchema:
          - AttributeName: s3Name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    galleryBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: milostim15.gallery

    albumsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessAlbums
        AttributeDefinitions:
          - AttributeName: s3Link
            AttributeType: S
        KeySchema:
          - AttributeName: s3Link
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

stepFunctions:
  stateMachines:
    uploadStepFunction:
      name: 'uploadStepFunction'
      events:
      - http:
          path: /upload
          method: POST
          request:
            schema:
              $ref: ./models/uploadRequest.json
          cors: true
      definition:
        StartAt: UploadS3
        States:
          # State key
          UploadS3:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-uploadS3"
            ResultPath: $.uploadS3Result
            Next: UploadDDB
          UploadDDB:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-uploadDDB"
            InputPath: $.uploadS3Result
            # Is end state
            End: true

    deleteStepFunction:
      name: 'deleteStepFunction'
      events:
      - http:
          path: /delete
          method: POST
          request:
            schema:
              $ref: ./models/uploadRequest.json
          cors: true
      definition:
        StartAt: DeleteS3
        States:
          # State key
          DeleteS3:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-deleteS3"
            ResultPath: $.deleteS3Result
            Next: DeleteDDB
          DeleteDDB:
            Type: Task
            Resource: "arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-deleteDDB"
            InputPath: $.deleteS3Result
            # Is end state
            End: true


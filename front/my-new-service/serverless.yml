# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-new-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-central-1
  environment:
    TABLE_NAME:
      Ref: users
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - sns:Publish
        - ses:SendEmail
        - ses:SendRawEmail
      Resource:
        - "Fn::GetAtt": [users, Arn]
        - arn:aws:sns:eu-central-1:260436118818:DatabaseTopic
        - arn:aws:ses:*


# you can overwrite defaults here
 

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1
  	
	
plugins:
  - serverless-step-functions


# you can add packaging information here
package:
 individually: True
 patterns:
   - '!**/**'
#    - include-me-dir/**

functions:
  testlambda:
    handler: user/test.test
    package:
      include: 'user/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - POST

  registerUser:
      handler: user/register.registerUser
      package:
        include: 'user/**'
      url:
        cors:
          allowedOrigins:
            - '*'
          allowedHeaders:
            - Authorization
          allowedMethods:
            - POST
      
      # events:
      # - sns:
      #     arn: !Ref SuperTopic
      #     topicName: DatabaseTopic
  sendInvitation:
    handler: familyInvitation/sendInvitation.sendInvitation
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT

  userFillsData:
    handler: familyInvitation/userFillsData.userFillsData
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT
  
  createUser:
    handler: familyInvitation/createUser.createUser
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT
  
  deleteUser:
    handler: familyInvitation/deleteUser.delete
    package:
      include: 'familyInvitation/**'
    url:
      cors:
        allowedOrigins:
          - '*'
        allowedHeaders:
          - Authorization
        allowedMethods:
          - PUT
#   loginUser:
#       handler: user/login.login
#       package:
#         include: 'user/**'
#       url:
#         cors:
#           allowedOrigins:
#             - '*'
#           allowedHeaders:
#             - Authorization
#           allowedMethods:
#             - POST

  # uploadGallery:
  #     handler: gallery/upload.upload
  #     package:
  #       include: 'gallery/**'
  #     url:
  #       cors:
  #         allowedOrigins:
  #           - '*'
  #         allowedHeaders:
  #           - Authorization
  #         allowedMethods:
  #           - POST
  # hello:
  #   handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessUsers
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    usersByInvitation:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessUsersByInvitation
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SuperTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: DatabaseTopic

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: selena.milutin@gmail.com
        Protocol: email
        TopicArn: {"Ref": "SuperTopic"}
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

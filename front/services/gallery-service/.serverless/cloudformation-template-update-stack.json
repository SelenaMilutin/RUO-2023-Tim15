{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "UploadS3LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gallery-service-dev-uploadS3"
      }
    },
    "UploadDDBLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gallery-service-dev-uploadDDB"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "gallery-service",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gallery-service-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gallery-service-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "galleryTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": "arn:aws:s3:::milostim15.gallery"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::milostim15.gallery/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution",
                    "states:StopExecution",
                    "states:DescribeExecution",
                    "states:ListExecutions",
                    "states:ListStateMachines",
                    "states:DescribeStateMachine",
                    "states:GetExecutionHistory"
                  ],
                  "Resource": [
                    "arn:aws:states:*:*:stateMachine:*",
                    "arn:aws:states:*:*:execution:*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "gallery-service",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "UploadS3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gallery-service/dev/1687650230558-2023-06-24T23:43:50.558Z/uploadS3.zip"
        },
        "Handler": "upload/uploadS3.upload",
        "Runtime": "nodejs14.x",
        "FunctionName": "gallery-service-dev-uploadS3",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadS3LogGroup"
      ]
    },
    "UploadDDBLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gallery-service/dev/1687650230558-2023-06-24T23:43:50.558Z/uploadDDB.zip"
        },
        "Handler": "upload/uploadDDB.upload",
        "Runtime": "nodejs14.x",
        "FunctionName": "gallery-service-dev-uploadDDB",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadDDBLogGroup"
      ]
    },
    "UploadDDBLambdaVersionMIFiNBfKiMRVQV854AhITTU6bC2OpKq4c48TVmCg8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadDDBLambdaFunction"
        },
        "CodeSha256": "8Wsus4AGTwm+H/VIfRXfqfFVisTC4LAszUtwhvZS2Sk="
      }
    },
    "UploadDDBLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "UploadDDBLambdaFunction",
            "Arn"
          ]
        },
        "Cors": {
          "AllowHeaders": [
            "Authorization"
          ],
          "AllowMethods": [
            "POST"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "UploadDDBLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadDDBLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "UploadS3LambdaVersionHcHoEE4O1OlMa6cyBKLnPZtlFJagG61CS9TAWNpQQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadS3LambdaFunction"
        },
        "CodeSha256": "8Wsus4AGTwm+H/VIfRXfqfFVisTC4LAszUtwhvZS2Sk="
      }
    },
    "UploadS3LambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "UploadS3LambdaFunction",
            "Arn"
          ]
        },
        "Cors": {
          "AllowHeaders": [
            "Authorization"
          ],
          "AllowMethods": [
            "POST"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "UploadS3LambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadS3LambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "UploadStepFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-gallery-service-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    "arn:aws:lambda:eu-central-1:260436118818:function:gallery-service-dev-uploadS3",
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": "arn:aws:lambda:eu-central-1:260436118818:function:gallery-service-dev-uploadS3"
                        }
                      ]
                    },
                    "arn:aws:lambda:eu-central-1:260436118818:function:gallery-service-dev-uploadDDB",
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": "arn:aws:lambda:eu-central-1:260436118818:function:gallery-service-dev-uploadDDB"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "UploadStepFunction": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": "{\n  \"StartAt\": \"UploadS3\",\n  \"States\": {\n    \"UploadS3\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:eu-central-1:260436118818:function:gallery-service-dev-uploadS3\",\n      \"ResultPath\": \"$.uploadS3Result\",\n      \"Next\": \"UploadDDB\"\n    },\n    \"UploadDDB\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:eu-central-1:260436118818:function:gallery-service-dev-uploadDDB\",\n      \"InputPath\": \"$.uploadS3Result\",\n      \"End\": true\n    }\n  }\n}",
        "RoleArn": {
          "Fn::GetAtt": [
            "UploadStepFunctionRole",
            "Arn"
          ]
        },
        "StateMachineName": "uploadStepFunction"
      },
      "DependsOn": [
        "UploadStepFunctionRole"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-gallery-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceUpload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "AuthorizationType": "NONE",
        "ApiKeyRequired": false,
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Credentials": {
            "Fn::GetAtt": [
              "ApigatewayToStepFunctionsRole",
              "Arn"
            ]
          },
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":states:action/StartExecution"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "UploadStepFunction"
                  }
                }
              ]
            },
            "application/x-www-form-urlencoded": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "UploadStepFunction"
                  }
                }
              ]
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": 200,
              "ResponseParameters": {},
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": 400,
              "ResponseParameters": {},
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {},
            "ResponseModels": {},
            "StatusCode": 400
          }
        ]
      }
    },
    "ApigatewayToStepFunctionsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "apigatewaytostepfunctions",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayDeployment1687650228985": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodUploadPost"
      ]
    },
    "galleryTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "serverlessGallery",
        "AttributeDefinitions": [
          {
            "AttributeName": "hasAccess",
            "AttributeType": "S"
          },
          {
            "AttributeName": "albumName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "hasAccess",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "albumName",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "galleryBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "milostim15.gallery"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-gallery-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "UploadDDBLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadDDBLambdaVersionMIFiNBfKiMRVQV854AhITTU6bC2OpKq4c48TVmCg8"
      },
      "Export": {
        "Name": "sls-gallery-service-dev-UploadDDBLambdaFunctionQualifiedArn"
      }
    },
    "UploadDDBLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "UploadDDBLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-gallery-service-dev-UploadDDBLambdaFunctionUrl"
      }
    },
    "UploadS3LambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadS3LambdaVersionHcHoEE4O1OlMa6cyBKLnPZtlFJagG61CS9TAWNpQQ"
      },
      "Export": {
        "Name": "sls-gallery-service-dev-UploadS3LambdaFunctionQualifiedArn"
      }
    },
    "UploadS3LambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "UploadS3LambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-gallery-service-dev-UploadS3LambdaFunctionUrl"
      }
    },
    "UploadStepFunctionArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "UploadStepFunction"
      },
      "Export": {
        "Name": "sls-gallery-service-dev-UploadStepFunctionArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-gallery-service-dev-ServiceEndpoint"
      }
    }
  }
}